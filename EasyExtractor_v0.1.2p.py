# Form implementation generated from reading ui file 'EasyExtractor_v0.0.4p.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
import sys
import subprocess #代替os.system
import time #为了创建输出文件名
import base64  #为了导入logo

# 主窗口
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(662, 438)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.DataBaseName_label = QtWidgets.QLabel(self.centralwidget)
        self.DataBaseName_label.setGeometry(QtCore.QRect(20, 9, 71, 31))
        self.DataBaseName_label.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.DataBaseName_label.setObjectName("DataBaseName_label")
        self.DataBaseName_label.setFont(QtGui.QFont('Microsoft YaHei', 14, 700))
        self.DataBaseName_toolButton = QtWidgets.QPushButton(self.centralwidget)
        self.DataBaseName_toolButton.setGeometry(QtCore.QRect(570, 12, 71, 28))
        self.DataBaseName_toolButton.setObjectName("DataBaseName_toolButton")
        self.DataBaseName_toolButton.setFont(QtGui.QFont('Microsoft YaHei', 9))
        #self.DataBaseName_toolButton.setAutoRaise(True)变得扁平，不移上去不会发现按钮
        #self.DataBaseName_toolButton.clicked.connect(lambda:self.YuFuncSelectFile)
        self.DataBaseName_toolButton.clicked.connect(self.YuFuncSelectFile) #选择库文件
        
        self.DataBaseID_groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.DataBaseID_groupBox.setGeometry(QtCore.QRect(21, 50, 621, 151))
        self.DataBaseID_groupBox.setObjectName("DataBaseID_groupBox")
        self.DataBaseID_groupBox.setFont(QtGui.QFont('Microsoft YaHei', 9))
        self.tabWidget = QtWidgets.QTabWidget(self.DataBaseID_groupBox)
        self.tabWidget.setGeometry(QtCore.QRect(16, 70, 596, 65))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tab.setFont(QtGui.QFont('Microsoft YaHei', 9))
        
        self.checkBox = QtWidgets.QCheckBox(self.tab)
        self.checkBox.setGeometry(QtCore.QRect(10, 10, 80, 20))
        self.checkBox.setObjectName("checkBox")
        self.checkBox.clicked.connect(self.YuCheckEverything) #进行分割
        self.checkBox.setChecked(True)
        
        self.checkBox_2 = QtWidgets.QCheckBox(self.tab)
        self.checkBox_2.setGeometry(QtCore.QRect(61, 10, 80, 20))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_2.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.checkBox_3 = QtWidgets.QCheckBox(self.tab)
        self.checkBox_3.setGeometry(QtCore.QRect(122, 10, 80, 20))
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_3.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.checkBox_4 = QtWidgets.QCheckBox(self.tab)
        self.checkBox_4.setGeometry(QtCore.QRect(193, 10, 80, 20))
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_4.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.checkBox_5 = QtWidgets.QCheckBox(self.tab)
        self.checkBox_5.setGeometry(QtCore.QRect(437, 10, 80, 20))
        self.checkBox_5.setObjectName("checkBox_5")
        self.checkBox_5.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.checkBox_6 = QtWidgets.QCheckBox(self.tab)
        self.checkBox_6.setGeometry(QtCore.QRect(254, 10, 80, 20))
        self.checkBox_6.setObjectName("checkBox_6")
        self.checkBox_6.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.checkBox_10 = QtWidgets.QCheckBox(self.tab)
        self.checkBox_10.setGeometry(QtCore.QRect(315, 10, 80, 20))
        self.checkBox_10.setObjectName("checkBox_10")
        self.checkBox_10.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.checkBox_11 = QtWidgets.QCheckBox(self.tab)
        self.checkBox_11.setGeometry(QtCore.QRect(376, 10, 80, 20))
        self.checkBox_11.setObjectName("checkBox_11")
        self.checkBox_11.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.checkBox_12 = QtWidgets.QCheckBox(self.tab)
        self.checkBox_12.setGeometry(QtCore.QRect(500, 10, 80, 20))
        self.checkBox_12.setObjectName("checkBox_12")
        self.checkBox_12.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.lineEdit_7 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_7.setGeometry(QtCore.QRect(550, 10, 31, 21))
        self.lineEdit_7.setObjectName("lineEdit_7")
            
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tab_2.setFont(QtGui.QFont('Microsoft YaHei', 9))
        self.checkBox_7 = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox_7.setGeometry(QtCore.QRect(10, 10, 80, 20))
        self.checkBox_7.setObjectName("checkBox_7")
        self.checkBox_7.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.lineEdit = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit.setGeometry(QtCore.QRect(46, 10, 40, 21))
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.tab_2)
        self.label.setGeometry(QtCore.QRect(90, 10, 55, 21))
        self.label.setObjectName("label")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_2.setGeometry(QtCore.QRect(145, 10, 20, 21))
        self.lineEdit_2.setText("")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_2 = QtWidgets.QLabel(self.tab_2)
        self.label_2.setGeometry(QtCore.QRect(170, 10, 21, 21))
        self.label_2.setObjectName("label_2")
        self.checkBox_8 = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox_8.setGeometry(QtCore.QRect(210, 10, 80, 20))
        self.checkBox_8.setObjectName("checkBox_8")
        self.checkBox_8.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.lineEdit_3 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_3.setGeometry(QtCore.QRect(246, 10, 40, 21))
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(290, 10, 55, 21))
        self.label_3.setObjectName("label_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_4.setGeometry(QtCore.QRect(345, 10, 20, 21))
        self.lineEdit_4.setText("")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_4 = QtWidgets.QLabel(self.tab_2)
        self.label_4.setGeometry(QtCore.QRect(370, 10, 21, 21))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.tab_2)
        self.label_5.setGeometry(QtCore.QRect(570, 10, 21, 21))
        self.label_5.setObjectName("label_5")
        self.checkBox_9 = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox_9.setGeometry(QtCore.QRect(410, 10, 80, 20))
        self.checkBox_9.setObjectName("checkBox_9")
        self.checkBox_9.clicked.connect(self.YuCheckEverything) #进行分割
        
        self.lineEdit_5 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_5.setGeometry(QtCore.QRect(446, 10, 40, 21))
        self.lineEdit_5.setText("")
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_6.setGeometry(QtCore.QRect(545, 10, 20, 21))
        self.lineEdit_6.setText("")
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.label_6 = QtWidgets.QLabel(self.tab_2)
        self.label_6.setGeometry(QtCore.QRect(490, 10, 55, 21))
        self.label_6.setObjectName("label_6")
        self.tabWidget.addTab(self.tab_2, "")
        self.textEdit = QtWidgets.QTextEdit(self.DataBaseID_groupBox)
        self.textEdit.setGeometry(QtCore.QRect(18, 35, 591, 26))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setFont(QtGui.QFont('Microsoft YaHei', 8))
        
        self.pushButton_2 = QtWidgets.QPushButton(self.DataBaseID_groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(118, 74, 31, 18))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setFont(QtGui.QFont('Microsoft YaHei', 8))
        self.pushButton_2.clicked.connect(self.YuFuncCheckReset) #分割复位
        
        self.label_7 = QtWidgets.QLabel(self.DataBaseID_groupBox)
        self.label_7.setGeometry(QtCore.QRect(485, 75, 250, 20))
        self.label_7.setObjectName("label_7")
        self.label_7.setFont(QtGui.QFont('Microsoft YaHei', 8))
        
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(90, 13, 471, 26))
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_2.setFont(QtGui.QFont('Microsoft YaHei', 8))
        self.DataBaseName_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.DataBaseName_label_2.setGeometry(QtCore.QRect(20, 208, 111, 31))
        self.DataBaseName_label_2.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.DataBaseName_label_2.setObjectName("DataBaseName_label_2")
        self.DataBaseName_label_2.setFont(QtGui.QFont('Microsoft YaHei', 14, 700))
        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(133, 213, 285, 26))
        self.textEdit_3.setObjectName("textEdit_3")
        self.textEdit_3.setFont(QtGui.QFont('Microsoft YaHei', 8))
        self.DataBaseName_toolButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.DataBaseName_toolButton_2.setGeometry(QtCore.QRect(430, 212, 71, 28))
        self.DataBaseName_toolButton_2.setObjectName("DataBaseName_toolButton_2")
        self.DataBaseName_toolButton_2.setFont(QtGui.QFont('Microsoft YaHei', 9))
        self.DataBaseName_toolButton_2.clicked.connect(self.YuFuncSelectIDFile) #选择ID文件

        self.DataBaseName_label_3 = QtWidgets.QLabel(self.centralwidget)
        self.DataBaseName_label_3.setGeometry(QtCore.QRect(525, 211, 111, 31))
        self.DataBaseName_label_3.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.DataBaseName_label_3.setObjectName("DataBaseName_label_3")
        self.DataBaseName_label_3.setFont(QtGui.QFont('Microsoft YaHei', 10))
        self.textEdit_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_4.setGeometry(QtCore.QRect(20, 245, 621, 91))
        self.textEdit_4.setObjectName("textEdit_4")
        self.textEdit_4.setFont(QtGui.QFont('Microsoft YaHei', 8))
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 350, 91, 51))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setFont(QtGui.QFont('Microsoft YaHei', 14, 700))
        self.pushButton.clicked.connect(self.YuFuncStartExtract) #开始提取
        
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(482, 400, 250, 20))
        self.label_8.setObjectName("label_8")
        self.label_8.setFont(QtGui.QFont('Microsoft YaHei', 8))
        
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(120, 350, 521, 51))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "EasyExtractor v0.1.2"))
        
        tmp_icon = open("tmp.ico", 'wb+')
        tmp_icon.write(base64.b64decode(
            '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'))
        tmp_icon.close()
        MainWindow.setWindowIcon(QtGui.QIcon("tmp.ico"))
        yangf_rm_command = "del tmp.ico" #$win∞unix
        yangf_rm_command = yangf_rm_command.replace("/","\\") #$win∞unix
        subprocess.run(yangf_rm_command,shell=True)

        self.DataBaseName_label.setText(_translate("MainWindow", "库文件："))
        self.DataBaseName_toolButton.setText(_translate("MainWindow", "选择文件"))
        self.DataBaseID_groupBox.setTitle(_translate("MainWindow", "库中ID"))
        self.checkBox.setText(_translate("MainWindow", ">"))
        self.checkBox_2.setText(_translate("MainWindow", "空格"))
        self.checkBox_3.setText(_translate("MainWindow", "Tab键"))
        self.checkBox_4.setText(_translate("MainWindow", "."))
        self.checkBox_5.setText(_translate("MainWindow", ";"))
        self.checkBox_6.setText(_translate("MainWindow", ","))
        self.checkBox_10.setText(_translate("MainWindow", ":"))
        self.checkBox_11.setText(_translate("MainWindow", "/"))
        self.checkBox_12.setText(_translate("MainWindow", "其它"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "简单"))
        self.checkBox_7.setText(_translate("MainWindow", "用"))
        self.label.setText(_translate("MainWindow", "分割,取第"))
        self.label_2.setText(_translate("MainWindow", "组"))
        self.checkBox_8.setText(_translate("MainWindow", "用"))
        self.label_3.setText(_translate("MainWindow", "分割,取第"))
        self.label_4.setText(_translate("MainWindow", "组"))
        self.label_5.setText(_translate("MainWindow", "组"))
        self.checkBox_9.setText(_translate("MainWindow", "用"))
        self.label_6.setText(_translate("MainWindow", "分割,取第"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "高级"))
        self.textEdit.setText(_translate("MainWindow", "example-ID…"))
        self.pushButton_2.setText(_translate("MainWindow", "复位"))
        self.label_7.setText(_translate("MainWindow", "高级中使用(\\t)代表Tab键"))
        self.textEdit_2.setText(_translate("MainWindow", "input_DataBase_file_path"))
        self.DataBaseName_label_2.setText(_translate("MainWindow", "基因ID文件："))
        self.textEdit_3.setHtml(_translate("MainWindow", "input_GeneID_file_path"))
        self.DataBaseName_toolButton_2.setText(_translate("MainWindow", "选择文件"))
        self.DataBaseName_label_3.setText(_translate("MainWindow", "或    在下方粘贴ID"))
        self.textEdit_4.setHtml(_translate("MainWindow", "Paste GeneID here"))
        self.pushButton.setText(_translate("MainWindow", "开始提取"))
        self.label_8.setText(_translate("MainWindow", "反馈：easyblast@foxmail.com"))
    
    def YuFuncSelectFile(self, MainWindow): #选择文件
        #self.textEdit_2.setText("what")
        yangf_pwd_command = "@echo off & echo %cd%" #$win∞unix
        yangf_now_path_pre = subprocess.Popen(yangf_pwd_command, shell=True, stdout=subprocess.PIPE)
        yangf_now_path = yangf_now_path_pre.stdout.read().decode('gbk').strip()
        input_DataBase_file, input_DataBase_file_type = QtWidgets.QFileDialog.getOpenFileName(None,  "选择库文件",  yangf_now_path,  "Fasta Files (*.fasta);;Fa Files (*.fa);;All Files (*)")
        self.textEdit_2.setText(input_DataBase_file)
        
        if input_DataBase_file == "":
            self.textEdit_2.setText("input_DataBase_file_path")
        else:
            #显示第一个ID在示例中
            input_DataBase_file_line_tag = 0
            F1 = open(input_DataBase_file)
            for line in F1:
                line = line.strip()
                if ">" in line and input_DataBase_file_line_tag == 0:
                    
                    origin_first_input_DataBase_ID = line

                    if self.checkBox.isChecked(): #分割>
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(">")[1]
                    if self.checkBox_2.isChecked(): #分割空格
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(" ")[0]
                    if self.checkBox_3.isChecked(): #分割Tab键
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split('\t')[0]
                    if self.checkBox_4.isChecked(): #分割.
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(".")[0]
                    if self.checkBox_6.isChecked(): #分割,
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(",")[0]
                    if self.checkBox_10.isChecked(): #分割:
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(":")[0]
                    if self.checkBox_11.isChecked(): #分割/
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split("/")[0]
                    if self.checkBox_5.isChecked(): #分割;
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(";")[0]
                    if self.checkBox_12.isChecked(): #分割自定义
                        split_item = self.lineEdit_7.text()
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(split_item)[0]

                    self.textEdit.setText(origin_first_input_DataBase_ID)
                    input_DataBase_file_line_tag += 1
            F1.close()
            if input_DataBase_file_line_tag == 0:
                origin_first_input_DataBase_ID = "库文件中似乎没找到 > 开始的序列名称"
                self.textEdit.setText(origin_first_input_DataBase_ID)
                
    def YuCheckEverything(self, MainWindow): #分割模式
        #if self.lineEdit_7.text() == "":
        #    self.checkBox.setChecked(False)
        #    self.checkBox_12.setCheckable(False)
        #    QtWidgets.QMessageBox.critical(None, "其它", "需要输入字符")
        #else:
        #    self.checkBox.setChecked(True)
        #    self.checkBox_12.setCheckable(True)
        
        try:
            input_DataBase_file = self.textEdit_2.toPlainText()
            input_DataBase_file_line_tag = 0
            F1 = open(input_DataBase_file)
            for line in F1:
                if ">" in line and input_DataBase_file_line_tag == 0:
                    line = line.strip()
                    origin_first_input_DataBase_ID = line
                    
                    #简单
                    if self.checkBox.isChecked(): #分割>
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(">")[1]
                    if self.checkBox_2.isChecked(): #分割空格
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(" ")[0]
                    if self.checkBox_3.isChecked(): #分割Tab键
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split('\t')[0]
                    if self.checkBox_4.isChecked(): #分割.
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(".")[0]
                    if self.checkBox_6.isChecked(): #分割,
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(",")[0]
                    if self.checkBox_10.isChecked(): #分割:
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(":")[0]
                    if self.checkBox_11.isChecked(): #分割/
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split("/")[0]
                    if self.checkBox_5.isChecked(): #分割;
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(";")[0]
                    if self.checkBox_12.isChecked(): #分割自定义
                        split_item = self.lineEdit_7.text()
                        #self.textEdit_3.setText(split_item)
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(split_item)[0]
                    
                    #高级
                    if self.checkBox_7.isChecked(): #自定义分割1
                        split_item = self.lineEdit.text()
                        split_num = self.lineEdit_2.text()
                        if split_item == "\\t":
                            split_item = '\t'
                        if split_item != "" and split_num != "":
                            origin_first_input_DataBase_ID_group = origin_first_input_DataBase_ID.split(split_item)
                            if (int(split_num)+1) > len(origin_first_input_DataBase_ID_group):
                                QtWidgets.QMessageBox.critical(None, "分割后", "不存在此部分，最大值为"+str(len(origin_first_input_DataBase_ID_group)-1))
                                self.checkBox_7.setChecked(False)
                            else:
                                origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(split_item)[int(split_num)]
                        else:
                            QtWidgets.QMessageBox.critical(None, "少参数", "请补充")
                            self.checkBox_7.setChecked(False)
                    if self.checkBox_8.isChecked(): #自定义分割2
                        split_item = self.lineEdit_3.text()
                        split_num = self.lineEdit_4.text()
                        if split_item == "\\t":
                            split_item = '\t'
                        if split_item != "" and split_num != "":
                            origin_first_input_DataBase_ID_group = origin_first_input_DataBase_ID.split(split_item)
                            if (int(split_num)+1) > len(origin_first_input_DataBase_ID_group):
                                QtWidgets.QMessageBox.critical(None, "分割后", "不存在此部分，最大值为"+str(len(origin_first_input_DataBase_ID_group)-1))
                                self.checkBox_8.setChecked(False)
                            else:
                                origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(split_item)[int(split_num)]
                        else:
                            QtWidgets.QMessageBox.critical(None, "少参数", "请补充")
                            self.checkBox_8.setChecked(False)       
                    if self.checkBox_9.isChecked(): #自定义分割3
                        split_item = self.lineEdit_5.text()
                        split_num = self.lineEdit_6.text()
                        if split_item == "\\t":
                            split_item = '\t'
                        if split_item != "" and split_num != "":
                            origin_first_input_DataBase_ID_group = origin_first_input_DataBase_ID.split(split_item)
                            if (int(split_num)+1) > len(origin_first_input_DataBase_ID_group):
                                QtWidgets.QMessageBox.critical(None, "分割后", "不存在此部分，最大值为"+str(len(origin_first_input_DataBase_ID_group)-1))
                                self.checkBox_9.setChecked(False)
                            else:
                                origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(split_item)[int(split_num)]
                        else:
                            QtWidgets.QMessageBox.critical(None, "少参数", "请补充")
                            self.checkBox_9.setChecked(False)

                    self.textEdit.setText(origin_first_input_DataBase_ID)
                    input_DataBase_file_line_tag += 1
                    
            F1.close()
        except:
            QtWidgets.QMessageBox.critical(None, "库文件", "请检查库文件")
            
    def YuFuncCheckReset(self, MainWindow): #分割复位
        self.checkBox.setChecked(True)
        self.checkBox_2.setChecked(False)
        self.checkBox_3.setChecked(False)
        self.checkBox_4.setChecked(False)
        self.checkBox_5.setChecked(False)
        self.checkBox_6.setChecked(False)
        self.checkBox_10.setChecked(False)
        self.checkBox_11.setChecked(False)
        self.checkBox_12.setChecked(False)
        self.lineEdit_7.setText("")
        self.checkBox_7.setChecked(False)
        self.lineEdit.setText("")
        self.lineEdit_2.setText("")
        self.checkBox_8.setChecked(False)
        self.lineEdit_3.setText("")
        self.lineEdit_4.setText("")
        self.checkBox_9.setChecked(False)
        self.lineEdit_5.setText("")
        self.lineEdit_6.setText("")
        
        try:
            input_DataBase_file = self.textEdit_2.toPlainText()
            input_DataBase_file_line_tag = 0
            F1 = open(input_DataBase_file)
            for line in F1:
                if ">" in line and input_DataBase_file_line_tag == 0:
                    line = line.strip()
                    origin_first_input_DataBase_ID = line
                    
                    #简单
                    if self.checkBox.isChecked(): #分割>
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(">")[1]
                    if self.checkBox_2.isChecked(): #分割空格
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(" ")[0]
                    if self.checkBox_3.isChecked(): #分割Tab键
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split('\t')[0]
                    if self.checkBox_4.isChecked(): #分割.
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(".")[0]
                    if self.checkBox_6.isChecked(): #分割,
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(",")[0]
                    if self.checkBox_10.isChecked(): #分割:
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(":")[0]
                    if self.checkBox_11.isChecked(): #分割/
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split("/")[0]
                    if self.checkBox_5.isChecked(): #分割;
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(";")[0]
                    if self.checkBox_12.isChecked(): #分割自定义
                        split_item = self.lineEdit_7.text()
                        #self.textEdit_3.setText(split_item)
                        origin_first_input_DataBase_ID = origin_first_input_DataBase_ID.split(split_item)[0]
                    

                    self.textEdit.setText(origin_first_input_DataBase_ID)
                    input_DataBase_file_line_tag += 1
                    
            F1.close()
        except:
            self.textEdit.setText("example-ID…")

    def YuFuncSelectIDFile(self, MainWindow): #选择ID文件
        #self.textEdit_2.setText("what")
        yangf_pwd_command = "@echo off & echo %cd%" #$win∞unix
        yangf_now_path_pre = subprocess.Popen(yangf_pwd_command, shell=True, stdout=subprocess.PIPE)
        yangf_now_path = yangf_now_path_pre.stdout.read().decode('gbk').strip()
        input_GeneID_file, input_GeneID_file_type = QtWidgets.QFileDialog.getOpenFileName(None,  "选择ID文件",  yangf_now_path,  "TXT Files (*.txt);;All Files (*)")
        self.textEdit_3.setText(input_GeneID_file)
        
        if input_GeneID_file == "":
            self.textEdit_3.setText("input_GeneID_file_path")

    def YuFuncStartExtract(self, MainWindow): #开始提取
   
        #收集待提取序列ID
        start_extract_id = {}
        try:
            input_GeneID_file = self.textEdit_3.toPlainText()
            F1 = open(input_GeneID_file)
            for line in F1:
                line = line.strip()
                if line not in start_extract_id:
                    start_extract_id[line] = 1
            F1.close()
        except:
            if self.textEdit_4.toPlainText() == "Paste GeneID here" or self.textEdit_4.toPlainText() == "":
                QtWidgets.QMessageBox.critical(None, "缺失", "请提供ID")
            else:
                F2 = self.textEdit_4.toPlainText().split('\n')
                for line in F2:
                    line = line.strip()
                    if line not in start_extract_id:
                        start_extract_id[line] = 1
        
        if len(start_extract_id) > 0:
            self.progressBar.setProperty("value", 50)
            #在库文件中进行提取
            try:
                yangf_pwd_command = "@echo off & echo %cd%" #$win∞unix
                yangf_now_path_pre = subprocess.Popen(yangf_pwd_command, shell=True, stdout=subprocess.PIPE)
                yangf_now_path = yangf_now_path_pre.stdout.read().decode('gbk').strip()
                
                yangf_now_time = time.strftime("%Y%m%d%H%M%S", time.localtime())
                #print(now_time)
                #print(type(now_time))
                extract_out_name = "EasyExtractor_output_"+yangf_now_time+".txt"
                OUT_extract = open(extract_out_name,'w+')
                self.progressBar.setProperty("value", 75)
                
                temp_extract_tag = 0
                input_DataBase_file = self.textEdit_2.toPlainText()
                F1 = open(input_DataBase_file)
                for line in F1:
                    line = line.strip()
                    if ">" in line:

                        input_DataBase_ID = line
                        
                        #简单
                        if self.checkBox.isChecked(): #分割>
                            input_DataBase_ID = input_DataBase_ID.split(">")[1]
                        if self.checkBox_2.isChecked(): #分割空格
                            input_DataBase_ID = input_DataBase_ID.split(" ")[0]
                        if self.checkBox_3.isChecked(): #分割Tab键
                            input_DataBase_ID = input_DataBase_ID.split('\t')[0]
                        if self.checkBox_4.isChecked(): #分割.
                            input_DataBase_ID = input_DataBase_ID.split(".")[0]
                        if self.checkBox_6.isChecked(): #分割,
                            input_DataBase_ID = input_DataBase_ID.split(",")[0]
                        if self.checkBox_10.isChecked(): #分割:
                            input_DataBase_ID = input_DataBase_ID.split(":")[0]
                        if self.checkBox_11.isChecked(): #分割/
                            input_DataBase_ID = input_DataBase_ID.split("/")[0]
                        if self.checkBox_5.isChecked(): #分割;
                            input_DataBase_ID = input_DataBase_ID.split(";")[0]
                        if self.checkBox_12.isChecked(): #分割自定义
                            split_item = self.lineEdit_7.text()
                            #self.textEdit_3.setText(split_item)
                            input_DataBase_ID = input_DataBase_ID.split(split_item)[0]
                        
                        #高级
                        if self.checkBox_7.isChecked(): #自定义分割1
                            split_item = self.lineEdit.text()
                            split_num = self.lineEdit_2.text()
                            if split_item == "\\t":
                                split_item = '\t'
                            input_DataBase_ID = input_DataBase_ID.split(split_item)[int(split_num)]
     
                        if self.checkBox_8.isChecked(): #自定义分割2
                            split_item = self.lineEdit_3.text()
                            split_num = self.lineEdit_4.text()
                            if split_item == "\\t":
                                split_item = '\t'
                            input_DataBase_ID = input_DataBase_ID.split(split_item)[int(split_num)]
                            
                        if self.checkBox_9.isChecked(): #自定义分割3
                            split_item = self.lineEdit_5.text()
                            split_num = self.lineEdit_6.text()
                            if split_item == "\\t":
                                split_item = '\t'
                            input_DataBase_ID = input_DataBase_ID.split(split_item)[int(split_num)]

                        #判断ID在不在待提字典中
                        if input_DataBase_ID in start_extract_id:
                            OUT_extract.write(line+'\n')
                            temp_extract_tag = 1
                        else:
                            temp_extract_tag = 0
                            
                    else:
                        if temp_extract_tag == 1:
                            OUT_extract.write(line+'\n')
                F1.close()
                self.progressBar.setProperty("value", 100)
                #self.progressBar.setValue(100)
                QtWidgets.QMessageBox.information(None, "完成", yangf_now_path+"\\"+extract_out_name)
                self.progressBar.setProperty("value", 0)
            except:
                QtWidgets.QMessageBox.critical(None, "缺失", "请提供库文件")
                OUT_extract.close()
        else:
            QtWidgets.QMessageBox.critical(None, "缺失", "提供的ID为空")
            
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)  # 创建一个QApplication，也就是你要开发的软件app
    QtWidgets.QApplication.setStyle(QtWidgets.QStyleFactory.create('Fusion'))
    MainWindow = QtWidgets.QMainWindow()  # 创建一个QMainWindow，用来装载你需要的各种组件、控件
    ui = Ui_MainWindow()  # ui是Ui_MainWindow()类的实例化对象
    ui.setupUi(MainWindow)  # 执行类中的setupUi方法，方法的参数是第二步中创建的QMainWindow
    MainWindow.show()  # 执行QMainWindow的show()方法，显示这个QMainWindow
    sys.exit(app.exec())  # 使用exit()或者点击关闭按钮退出QApplication